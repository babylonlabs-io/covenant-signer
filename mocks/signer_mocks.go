// Code generated by MockGen. DO NOT EDIT.
// Source: signerapp/expected_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	signerapp "github.com/babylonlabs-io/covenant-signer/signerapp"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	gomock "github.com/golang/mock/gomock"
)

// MockBabylonParamsRetriever is a mock of BabylonParamsRetriever interface.
type MockBabylonParamsRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonParamsRetrieverMockRecorder
}

// MockBabylonParamsRetrieverMockRecorder is the mock recorder for MockBabylonParamsRetriever.
type MockBabylonParamsRetrieverMockRecorder struct {
	mock *MockBabylonParamsRetriever
}

// NewMockBabylonParamsRetriever creates a new mock instance.
func NewMockBabylonParamsRetriever(ctrl *gomock.Controller) *MockBabylonParamsRetriever {
	mock := &MockBabylonParamsRetriever{ctrl: ctrl}
	mock.recorder = &MockBabylonParamsRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonParamsRetriever) EXPECT() *MockBabylonParamsRetrieverMockRecorder {
	return m.recorder
}

// ParamsByHeight mocks base method.
func (m *MockBabylonParamsRetriever) ParamsByHeight(ctx context.Context, height uint64) (*signerapp.BabylonParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamsByHeight", ctx, height)
	ret0, _ := ret[0].(*signerapp.BabylonParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParamsByHeight indicates an expected call of ParamsByHeight.
func (mr *MockBabylonParamsRetrieverMockRecorder) ParamsByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamsByHeight", reflect.TypeOf((*MockBabylonParamsRetriever)(nil).ParamsByHeight), ctx, height)
}

// MockBtcChainInfo is a mock of BtcChainInfo interface.
type MockBtcChainInfo struct {
	ctrl     *gomock.Controller
	recorder *MockBtcChainInfoMockRecorder
}

// MockBtcChainInfoMockRecorder is the mock recorder for MockBtcChainInfo.
type MockBtcChainInfoMockRecorder struct {
	mock *MockBtcChainInfo
}

// NewMockBtcChainInfo creates a new mock instance.
func NewMockBtcChainInfo(ctrl *gomock.Controller) *MockBtcChainInfo {
	mock := &MockBtcChainInfo{ctrl: ctrl}
	mock.recorder = &MockBtcChainInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBtcChainInfo) EXPECT() *MockBtcChainInfoMockRecorder {
	return m.recorder
}

// BestBlockHeight mocks base method.
func (m *MockBtcChainInfo) BestBlockHeight(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestBlockHeight", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BestBlockHeight indicates an expected call of BestBlockHeight.
func (mr *MockBtcChainInfoMockRecorder) BestBlockHeight(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestBlockHeight", reflect.TypeOf((*MockBtcChainInfo)(nil).BestBlockHeight), ctx)
}

// TxByHash mocks base method.
func (m *MockBtcChainInfo) TxByHash(ctx context.Context, txHash *chainhash.Hash, pkScript []byte) (*signerapp.TxInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxByHash", ctx, txHash, pkScript)
	ret0, _ := ret[0].(*signerapp.TxInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxByHash indicates an expected call of TxByHash.
func (mr *MockBtcChainInfoMockRecorder) TxByHash(ctx, txHash, pkScript interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxByHash", reflect.TypeOf((*MockBtcChainInfo)(nil).TxByHash), ctx, txHash, pkScript)
}

// MockExternalBtcSigner is a mock of ExternalBtcSigner interface.
type MockExternalBtcSigner struct {
	ctrl     *gomock.Controller
	recorder *MockExternalBtcSignerMockRecorder
}

// MockExternalBtcSignerMockRecorder is the mock recorder for MockExternalBtcSigner.
type MockExternalBtcSignerMockRecorder struct {
	mock *MockExternalBtcSigner
}

// NewMockExternalBtcSigner creates a new mock instance.
func NewMockExternalBtcSigner(ctrl *gomock.Controller) *MockExternalBtcSigner {
	mock := &MockExternalBtcSigner{ctrl: ctrl}
	mock.recorder = &MockExternalBtcSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalBtcSigner) EXPECT() *MockExternalBtcSignerMockRecorder {
	return m.recorder
}

// RawSignature mocks base method.
func (m *MockExternalBtcSigner) RawSignature(ctx context.Context, request *signerapp.SigningRequest) (*signerapp.SigningResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawSignature", ctx, request)
	ret0, _ := ret[0].(*signerapp.SigningResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawSignature indicates an expected call of RawSignature.
func (mr *MockExternalBtcSignerMockRecorder) RawSignature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawSignature", reflect.TypeOf((*MockExternalBtcSigner)(nil).RawSignature), ctx, request)
}
